---
title: "Non-Elective Flow Model Documentation"
execute:
  echo: false
  warning: false
  message: false
format:
    html:
        toc: true
        embed-resources: true
---

```{python}
#| label: library-imports
import pandas as pd
import numpy as np
import pyodbc
import sys
import os
import distribution_functions
from sim_tools.distributions import (Lognormal)
import plotly.graph_objects as go
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde
from plotly.subplots import make_subplots
root_dir = os.path.abspath(os.path.join(os.getcwd(), '..'))
sys.path.append(root_dir)
from app.model import g, Trial
import report_functions
```



```{python}
# get los values
beds=456
demand=53
```



## Target Inpatient Length of Stay

```{python}
df, fig, value_vars = report_functions.vary_los(prop_sdec=0,
beds=beds, demand=demand, runs=10, escalation=0, reneging=0, prioritisation=0)

max_los = report_functions.find_max_los(df, 'Daily 12hr LoS Breaches')

fig.add_vline(
        x=max_los,
        line_dash='dash',
        line_color='black',
        opacity=0.7
    )

fig.update_layout(
    title_text=f"Beds: {beds}, Demand: {demand}, Max los_hrs: {round(max_los)}"
)


names_to_remove = {'ED Admissions', 'SDEC Admissions', 'Daily 12hr DTAs'}

fig.data = tuple(
    trace for trace in fig.data
    if trace.name not in names_to_remove
)

fig.show()
#df
```

For a hospital with 456 beds and 53 people needing admission daily mean length of stay needs to be at least below 190 hrs for 0 12hr breaches

## Comparing actual length of stay and target length of stay
```{python}
# get los values
mode=16
mean_list, std_list = distribution_functions.make_lognormal_lists(mode, 20)
```

```{python}
# Histogram comparing max los(target) with real los (current)
max_los_index=mean_list.index(max_los)
```

```{python}
# Read in real data
dsn = "coch_p2" 

read_connection = pyodbc.connect(f'DSN={dsn}', autocommit=True)

sql_query = """
select
	ENCNTR_ID
	,MinWardStart
	,MaxWardEnd
	,LoSHrs
	,nctr_total_days
from InformationSandpitDB.Reports.pbi_FlowSimulation_NCTR
where MaxWardEnd between '20240401' and '20250401'
"""
df = pd.read_sql_query(sql_query, read_connection)
read_connection.close()

# replace NaNs with 0s
df['nctr_total_days']=df['nctr_total_days'].fillna(0)
df['adjusted_los']=df['LoSHrs']-(df['nctr_total_days'] * 24.0)
df['adjusted_los']=np.where(df['adjusted_los']<0, 0, df['adjusted_los'])
```

```{python}
fig_theory, df_theory=distribution_functions.visualise_lognormal(mean_list, std_list)

target_mean=df_theory.loc[max_los_index, 'Mean']
target_median=df_theory.loc[max_los_index, 'Median']
target_list=[target_mean, '', '','', target_median, '', '']
```


```{python}
# Histogram comparing max los(target) with real los (current)
fig_list, list_of_summary_lists = distribution_functions.hist_compare_real_model(df['LoSHrs'], "Current LoS Hrs", mean_list, std_list, random_seed=5)

fig_list[max_los_index]

metrics_list=['mean','25 perc','median','75 perc','95 perc']

compare_list=[list_of_summary_lists[0], target_list]
summary_table=distribution_functions.summary_lists_to_table(compare_list)
summary_table=summary_table.rename(columns={'LoS Dist -1':'Real LoS'})
summary_table=summary_table.rename(columns={'LoS Dist 0':'Target LoS'})
summary_table=summary_table[summary_table['Metric'].isin(metrics_list)]
summary_table.set_index('Metric', inplace=True)
display(summary_table)
```


## NCTR

This reduction in length of stay corresponds to an approximately 100% reduction in NCTR
lengths of stay.

```{python}
# Corresponds to approx 100% reduction in NCTR length of stay
# Table comparing actual 100% reduction in NCTR and target/ current
adjusted_los=distribution_functions.samples_to_summary_list((df['adjusted_los'].tolist()))

compare_list=[list_of_summary_lists[0], target_list, adjusted_los]
summary_table=distribution_functions.summary_lists_to_table(compare_list)
summary_table=summary_table.rename(columns={'LoS Dist -1':'Real LoS'})
summary_table=summary_table.rename(columns={'LoS Dist 0':'Target LoS'})
summary_table=summary_table.rename(columns={'LoS Dist 1':'NCTR -100%'})
summary_table=summary_table[summary_table['Metric'].isin(metrics_list)]
summary_table.set_index('Metric', inplace=True)
display(summary_table)
```